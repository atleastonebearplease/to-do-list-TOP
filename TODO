Model:
  ✔ Create the Task class in separate module @done(25-10-16 11:03)
  ✔ Import it into the index and test it @done(25-10-16 11:03)

  ✔ Add functional date and time to completion for tasks @done(25-10-16 11:24)
    ✔ Research and test using the date functions @done(25-10-16 11:24)

  ☐ Create the TreeNode and TreeService
    ☐ Start with just the TreeNode
      ✔ Just make the addChild function first and make sure it works @done(25-10-19 21:41)
      ✔ Then make the setRoot function and make sure that works @done(25-10-19 21:41)
      ✔ Make the Traverse(callback) function and make sure it works (can be used for printing for example) @done(25-10-19 22:06)
    ☐ Create the TreeService
      ✔ To test, you can write a function to traverse the tree and print it out with indents (file tree style) @done(25-10-20 09:46)
      This might just basically be what traverse is doing
      ☐ Now add the findByID(id) function
      ☐ Now add the findNode(predicate) function
      This finds a node based on a call back function that tests for a condition (depth first recursively)
      and return the node. Used for finding by title, due date, completed items, etc.
      ☐ Now add removeNode(root, predicate) function
      Recursively check for the first match and splice it out of the root's children array (ChatGPT)
      ☐ Consider adding a map function to perform operations on it (such as saving the whole tree?)

  This is a static class that will produce IDs, hold the last ID made, and do operations
  on IDs that exist in the code base. We are looking for a hierarchical set of IDs so that we 
  can separate tasks and subtasks and empower us to do a cheap breadth first search
  ✔ Create the IDService @done(25-10-18 16:24)
    ✔ Start with a simple, non hierarchical ID for tasks. Follow the diagram @done(25-10-16 11:53)
    ✔ Make hierarchical ID (No guardrails though) @done(25-10-16 11:53)
    ✔ Add projectIDs as well @done(25-10-18 16:12)
    Don't need hierarchical ones there
    ✔ Add function for getting the uniqueID (the last ID is the current object's ID) @done(25-10-18 16:24)
  
  ☐ Create a bunch of Unique ToDo items so you can work on displaying items on screen
  Ya need some inspiration/sparkly things to look at  

View:
  ✔ Get the basic page layout setup - look to one of the other ToDo apps for inspiration @done(25-10-15 12:16)
      ✔ Sidebar @done(25-10-15 11:24)
      ✔ Section in page for ToDo items @done(25-10-15 11:37)
      ✔ Header for ToDo Items @done(25-10-15 11:40)
      ✔ Add section for profile name and other buttons to go @done(25-10-15 12:12)
      ✔ Add section in sidebar for projects @done(25-10-15 12:12)
        ✔ Just make a single project 'card' to start @done(25-10-15 12:12)
          This is because we will eventually have multiple projects here
  ✔ Rewatch the video on designing websites/programs and take notes @done(25-10-14 14:17)

  ☐ Create the ToDo items wrapper underneath the header that your code can latch onto
  ☐ Display like 10 ToDo items so that you can work on how they look for a bit
  
  ☐ Think about what the most prominent features should be and design around that.
    ☐ Use the elements described in the video to make something good.


Controller:
  ☐ 


ACTIONS THIS COMMIT
-